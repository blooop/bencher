[project]
name = "python_template"
version = "0.2.0"
authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A python package template"
readme = "README.md"
requires-python = ">= 3.10"

dependencies = []

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
python_template = { path = ".", editable = true }

[project.optional-dependencies]
test = [
  "black>=23,<=24.4.2",
  "pylint>=2.17.7,<=3.2.2",
  "pytest-cov>=4.1,<=5.0.0",
  "pytest>=7.4,<=8.2.1",
  "hypothesis>=6.82,<=6.102.6",
  "ruff>=0.0.280,<=0.4.5",
  "coverage>=7.2.7,<=7.5.1",
]

[project.urls]
Source = "https://github.com/blooop/python_template"
Home = "https://github.com/blooop/python_template"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

# Environments
[tool.pixi.environments]
default = { solve-group = "default" }
test = { features = ["test"], solve-group = "default" }

[tool.pixi.tasks]
pr = "pixi install; git commit -a -m'update pixi.lock';git push"

[tool.pixi.feature.test.tasks]
format = "black ."
check-clean-workspace = "git diff --exit-code"
ruff-lint = "ruff check . --fix"
pylint = "echo 'running pylint...'; pylint --version && pylint $(git ls-files '*.py')"
lint = { depends_on = ["ruff-lint","check-clean-workspace", "pylint"] }
style = { depends_on = ["format","lint"]}
test = "pytest"
coverage = "coverage run -m pytest; coverage xml -o coverage.xml"
coverage-report = "coverage report -m"
ci-no-cover = { depends_on = ["style", "test"] }
ci = { depends_on = ["style", "coverage", "coverage-report"] }
update-lock-push = "pixi install; git commit -a -m'update pixi.lock';git push"

[tool.pixi.dependencies]
numpy = ">=1.26.4,<1.27"


[tool.setuptools.packages.find]
include= ["python_template"]

[tool.pylint]
extension-pkg-whitelist = ["numpy"]
jobs = 16                           #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods"
enable = "no-else-return,consider-using-in"

[tool.black]
line-length = 100

[tool.ruff]


# Same as Black.
line-length = 100

target-version = "py310"

[tool.ruff.lint]
# Never enforce `E501` (line length violations).
#"F841" will auto remove unused variables which is annoying during development, pylint catches this anyway
ignore = ["E501", "E902", "F841"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]


[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]
