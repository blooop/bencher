# Generated by CodiumAI
# from diskcache import Cache

import unittest

from bencher.example.benchmark_data import SimpleBenchClass
import bencher as bch


class TestBenchPlotServer(unittest.TestCase):
    # def __init__(self, methodName: str = "runTest") -> None:
    #     super().__init__(methodName)
    #     self.bench_name = "test_bench_server"

    # def setup_server(self):
    # Tests that the plot server loads previously calculated benchmark data from the cache
    # def test_plot_server_load_data_from_cache(self):
    #     sbc = SimpleBenchClass()
    #     bench = bch.Bench("test_bench_server", sbc.call)
    #     bench.plot_sweep(
    #         title="test_bench_server",
    #         input_vars=[sbc.param.var1],
    #         result_vars=[sbc.param.result],
    #         run_cfg=bch.BenchRunCfg(auto_plot=False),
    #     )

    #     def start_server():
    #         BenchPlotServer().plot_server(self.bench_name, BenchPlotSrvCfg())

    #     from threading import Thread

    #     th = Thread(target=start_server)

    #     # server = BenchPlotServer()

    #     # server.load_data_from_cache(bench.bench_name)
    #     # bench_name = "test_bench"
    #     # cache = Cache(os.path.join(os.getcwd(), "cachedir/benchmark_inputs"))
    #     # bench_cfg = BenchCfg(bench_name=bench_name, input_vars=[], result_vars=[])
    #     # cache.set(bench_name, [bench_cfg.hash_persistent(True)])
    #     # cache.set(bench_cfg.hash_persistent(True), bench_cfg)
    #     # plots_instance = server.load_data_from_cache(bench_name)
    #     # self.assertIsNotNone(plots_instance)
    #     # self.assertIsInstance(plots_instance[0], BenchCfg)
    #     # self.assertIsInstance(plots_instance[1], list)
    #     # self.assertIsInstance(plots_instance[1][0], pn.pane.base.Base)

    # Tests that the plot server loads previously calculated benchmark data from the database
    def test_plot_server_load_data_from_database(self):
        sbc = SimpleBenchClass()
        bench = bch.Bench("test_bench_server", sbc.call)
        bench.plot_sweep(
            title="test_bench_server",
            input_vars=[sbc.param.var1],
            result_vars=[sbc.param.result],
            run_cfg=bch.BenchRunCfg(auto_plot=False),
        )

        bps = bch.BenchPlotServer()

        bps.load_data_from_cache(bench.bench_name)

        # def start_server():
        # BenchPlotServer().plot_server(self.bench_name, BenchPlotSrvCfg())

        # from threading import Thread

    #
    # th = Thread(target=start_server)
    # th.start()

    # th.join()
    # server = BenchPlotServer()
    # bench_name = "test_bench"
    # cache = Cache("cachedir/benchmark_inputs")
    # # bench_cfg = BenchCfg(bench_name=bench_name)
    # bench_cfg = BenchCfg(bench_name=bench_name, input_vars=[], result_vars=[])

    # cache.set(bench_name, [bench_cfg.hash_persistent(True)])
    # cache.set(bench_cfg.hash_persistent(True), bench_cfg)
    # plots_instance = server.load_data_from_cache(bench_name)
    # self.assertIsNotNone(plots_instance)
    # self.assertIsInstance(plots_instance[0], BenchCfg)
    # self.assertIsInstance(plots_instance[1], list)
    # self.assertIsInstance(plots_instance[1][0], pn.panel)

    # Tests that the plot server raises FileNotFoundError when no data is found in the cache
    def test_plot_server_no_data_in_cache(self):
        server = bch.BenchPlotServer()
        bench_name = "test_bench"
        with self.assertRaises(FileNotFoundError):
            server.load_data_from_cache(bench_name)

    # Tests that the plot server raises FileNotFoundError when no data is found in the database
    # def test_plot_server_no_data_in_database(self):
    #     server = bch.BenchPlotServer()

    #     with self.assertRaises(FileNotFoundError):
    #         bps = bch.BenchPlotServer()
    #         bps.load_data_from_cache("non_existent")

    # bps.load_data_from_cache(bench.bench_name)
    # bench_name = "test_bench"
    # with Cache("cachedir/benchmark_inputs") as cache:
    #     if bench_name in cache:
    #         with self.assertRaises(FileNotFoundError):
    #             server.load_data_from_cache(bench_name)
    #     else:
    #         with self.assertRaises(FileNotFoundError):
    #             server.load_data_from_cache(bench_name)

    # Tests that the plot server is launched with a fixed port
    # def test_plot_server_fixed_port(self):
    #     server = BenchPlotServer()
    #     bench_name = "test_bench"
    #     cache = Cache("cachedir/benchmark_inputs")
    #     bench_cfg = BenchCfg(bench_name=bench_name)
    #     cache.set(bench_name, [bench_cfg.hash_persistent(True)])
    #     cache.set(bench_cfg.hash_persistent(True), bench_cfg)
    #     plots_instance = server.load_data_from_cache(bench_name)
    #     with self.subTest("Test fixed port"):
    #         with self.assertRaises(SystemExit):
    #             server.serve(bench_name, plots_instance, port=5006)
    #     with self.subTest("Test no fixed port"):
    #         with self.assertRaises(SystemExit):
    #             server.serve(bench_name, plots_instance)

    # # Tests that WebSocket origin is allowed when a fixed port is used
    # def test_plot_server_allow_ws_origin(self):
    #     server = BenchPlotServer()
    #     bench_name = "test_bench"
    #     cache = Cache("cachedir/benchmark_inputs")
    #     bench_cfg = BenchCfg(bench_name=bench_name)
    #     cache.set(bench_name, [bench_cfg.hash_persistent(True)])
    #     cache.set(bench_cfg.hash_persistent(True), bench_cfg)
    #     plots_instance = server.load_data_from_cache(bench_name)
    #     with self.subTest("Test allow_ws_origin"):
    #         os.environ["BOKEH_ALLOW_WS_ORIGIN"] = "localhost:5006"
    #         with self.assertRaises(SystemExit):
    #             server.serve(bench_name, plots_instance, port=5006)
    #     with self.subTest("Test no allow_ws_origin"):
    #         with self.assertRaises(SystemExit):
    #             server.serve(bench_name, plots_instance)
