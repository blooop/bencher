# Generated by CodiumAI
from bencher.bench_cfg import BenchCfg
from bencher.bench_cfg import ReduceType
from bencher.bench_vars import ParametrizedSweep
import xarray as xr


import unittest


class TestGetHvDataset(unittest.TestCase):
    # Tests that the method returns a holoviews Dataset object with the expected result variables
    def test_hv_dataset_returns_expected_result(self):
        cfg = BenchCfg()
        cfg.result_vars = [
            ParametrizedSweep("var1", [1, 2, 3]),
            ParametrizedSweep("var2", [4, 5, 6]),
        ]
        cfg.ds = xr.Dataset({"var1": ([], [1, 2, 3]), "var2": ([], [4, 5, 6])})
        hvds = cfg.get_hv_dataset()
        self.assertEqual(hvds.vdims, ["var1", "var2"])

    # Tests that if reduce is set to auto and repeats > 1, the method reduces the dataset by repeat dimension
    def test_hv_dataset_reduces_by_repeat_dimension(self):
        cfg = BenchCfg()
        cfg.result_vars = [
            ParametrizedSweep("var1", [1, 2, 3]),
            ParametrizedSweep("var2", [4, 5, 6]),
        ]
        cfg.ds = xr.Dataset(
            {
                "var1": (["repeat"], [[1, 2, 3], [4, 5, 6]]),
                "var2": (["repeat"], [[7, 8, 9], [10, 11, 12]]),
            }
        )
        hvds = cfg.get_hv_dataset()
        self.assertEqual(hvds.vdims, ["var1", "var2"])
        self.assertEqual(hvds.dims, ["repeat"])

    # Tests that if reduce is set to auto and repeats = 1, the method squeezes the dataset by repeat dimension
    def test_hv_dataset_squeezes_by_repeat_dimension(self):
        cfg = BenchCfg()
        cfg.result_vars = [
            ParametrizedSweep("var1", [1, 2, 3]),
            ParametrizedSweep("var2", [4, 5, 6]),
        ]
        cfg.ds = xr.Dataset({"var1": ([], [1, 2, 3]), "var2": ([], [4, 5, 6])})
        hvds = cfg.get_hv_dataset()
        self.assertEqual(hvds.vdims, ["var1", "var2"])
        self.assertEqual(hvds.dims, [])

    # Tests that if reduce is set to none, the method returns the original dataset without any reduction or squeezing
    def test_hv_dataset_returns_original_dataset_without_reduction_or_squeezing(self):
        cfg = BenchCfg()
        cfg.result_vars = [
            ParametrizedSweep("var1", [1, 2, 3]),
            ParametrizedSweep("var2", [4, 5, 6]),
        ]
        cfg.ds = xr.Dataset({"var1": ([], [1, 2, 3]), "var2": ([], [4, 5, 6])})
        hvds = cfg.get_hv_dataset(ReduceType.NONE)
        self.assertEqual(hvds.vdims, ["var1", "var2"])
        self.assertEqual(hvds.dims, [])

    # Tests that if the input dataset is empty, the method returns an empty holoviews Dataset object
    def test_hv_dataset_returns_empty_hv_dataset_object(self):
        cfg = BenchCfg()
        hvds = cfg.get_hv_dataset()
        self.assertEqual(hvds.vdims, [])
        self.assertEqual(hvds.dims, [])

    # Tests that if the result_vars list is empty, the method returns a holoviews Dataset object with all variables as dimensions
    def test_hv_dataset_returns_hv_dataset_object_with_all_dimensions(self):
        cfg = BenchCfg()
        cfg.ds = xr.Dataset({"var1": ([], [1, 2, 3]), "var2": ([], [4, 5, 6])})
        hvds = cfg.get_hv_dataset()
        self.assertEqual(hvds.vdims, [])
        self.assertEqual(hvds.dims, ["var1", "var2"])
